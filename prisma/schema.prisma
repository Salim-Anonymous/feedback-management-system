// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// enums
enum Role {
  ADMIN
  USER
  MODERATOR
}

enum FeedbackStatus {
  OPEN
  FLAGGED
  CLOSED
}

enum USER_STATUS {
  BANNED_FROM_POSTING
  ACTIVE
}

enum Visibility {
  ANONYMOUS
  PUBLIC
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum FileType {
  IMAGE
  VIDEO
  AUDIO
  OTHER
}

// models
model Feedback {
  id          String         @id @default(cuid())
  number      BigInt         @unique @default(autoincrement())
  subject     String
  description String?        @db.VarChar(5000)
  status      FeedbackStatus @default(OPEN)
  author      User?          @relation(fields: [authorId], references: [id])
  authorId    String?
  visibility  Visibility     @default(ANONYMOUS)
  comments    Comment[]
  reports     Report[]
  votes       Vote[]
  likes       Like[]
  files       Files[]
  createdAt   DateTime       @default(now())
  flaggedAt   DateTime?
  closedAt    DateTime?
  category    Category[]
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?    @db.VarChar(300)
  moderator   User?      @relation(fields: [moderatorId], references: [id])
  moderatorId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  feedbacks   Feedback[]
}

model Report {
  id         String   @id @default(cuid())
  message    String   @db.VarChar(5000)
  author     User?    @relation(fields: [authorId], references: [id])
  authorId   String?
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId String
  createdAt  DateTime @default(now())
}

model Vote {
  id         String   @id @default(cuid())
  type       VoteType
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  feedback   Feedback? @relation(fields: [feedbackId], references: [id])
  feedbackId String?
  createdAt  DateTime @default(now())
}

model Like {
  id         String   @id @default(cuid())
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId String
  createdAt  DateTime @default(now())
}

model Comment {
  id         String     @id @default(cuid())
  message    String?    @db.VarChar(500)
  files      Files[]
  author     User?      @relation(fields: [authorId], references: [id])
  authorId   String?
  feedback   Feedback   @relation(fields: [feedbackId], references: [id])
  feedbackId String
  visibility Visibility @default(ANONYMOUS)
  createdAt  DateTime   @default(now())
}

model Files {
  id        String     @id @default(cuid())
  url       String      @db.VarChar(500)
  feedbacks Feedback[]
  comments  Comment[]
}

model Notification {
  id          String   @id @default(cuid())
  message     String
  recipient   User     @relation(fields: [recipientId], references: [id])
  recipientId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  role          Role           @default(USER)
  status        USER_STATUS    @default(ACTIVE)
  image         String?
  accounts      Account[]
  sessions      Session[]
  feedbacks     Feedback[]
  comments      Comment[]
  reports       Report[]
  votes         Vote[]
  likes         Like[]
  categories    Category[]
  Notification  Notification[]
  Settings      Settings[]
}

model Settings {
  id            String   @id @default(cuid())
  notifications Boolean  @default(true)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
